// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package supercontractserver;

import "blockchain.proto";
import "storage.proto";
import "internet.proto";

// The Supercontract service definition.
service SupercontractServer {
  // Sends a greeting
  rpc Ping (PingRequest) returns (PingReply) {}
  rpc ExecuteCall (stream Request) returns (stream Response) {}
}

// The request message containing the user's name.
message PingRequest {
  string name = 1;
}

// The response message containing the greetings
message PingReply {
  string message = 1;
}

message ExecuteRequest {
  bytes contract_key = 1;
  bytes call_id = 2;
  bytes session_id = 9;
  string file_to_call = 3;
  string function_to_call = 4;
  bytes parameters = 5;
  uint64 poex_secret_data_prefix = 6;
  uint64 sc_prepayment = 7;
  uint64 sm_prepayment = 8;
  uint32 call_mode = 10;
}

message ExecuteReturns {
  bool success = 1;
  uint64 sc_consumed = 2;
  uint64 sm_consumed = 3;
  uint64 poex_secret_data = 4;
  uint32 return_val = 5;
}

message Request {
  oneof client_message {
    ExecuteRequest request = 1;
    GetBlockHeightReturn get_block_height_return = 2;
    GetBlockHashReturn get_block_hash_return = 3;
    GetBlockTimeReturn get_block_time_return = 4;
    GetBlockGenerationTimeReturn get_block_generation_time_return = 5;
    GetTransactionHashReturn get_transaction_hash_return = 6;
    GetCallerPublicKeyReturn get_caller_public_key_return = 7;
    GetServicePaymentReturn get_service_payment_return = 8;
    AddTransactionReturn add_transaction_return = 9;
    GetTransactionBlockHeightReturn get_transaction_block_height_return = 10;
    GetResponseTransactionHashReturn get_response_transaction_hash_return = 11;
    GetTransactionContentReturn get_transaction_content_return = 12;
    OpenFileReturn open_file_return = 13;
    WriteFileStreamReturn write_file_stream_return = 14;
    FlushReturn flush_return = 15;
    ReadFileStreamReturn read_file_stream_return = 16;
    CloseFileReturn close_file_return = 17;
    PathExistReturn path_exist_return = 18;
    IsFileReturn is_file_return = 19;
    CreateDirReturn create_dir_return = 20;
    MoveFileReturn move_file_return = 21;
    RemoveFileReturn remove_file_return = 22;
    OpenConnectionReturn open_connection_return = 23;
    ReadConnectionStreamReturn read_connection_stream_return = 24;
    CloseConnectionReturn close_connection_return = 25;
    CreateDirIteratorReturn create_dir_iterator_return = 26;
    DestroyDirIteratorReturn destroy_dir_iterator_return = 27;
    HasNextIteratorReturn has_next_iterator_return = 28;
    NextDirIteratorReturn next_dir_iterator_return = 29;
    RemoveDirIteratorReturn remove_dir_iterator_return = 30;
  }
}

message Response {
  oneof server_message {
    ExecuteReturns returns = 1;
    GetBlockHeight get_block_height = 2;
    GetBlockHash get_block_hash = 3;
    GetBlockTime get_block_time = 4;
    GetBlockGenerationTime get_block_generation_time = 5;
    GetTransactionHash get_transaction_hash = 6;
    GetCallerPublicKey get_caller_public_key = 7;
    GetServicePayment get_service_payment = 8;
    AddTransaction add_transaction = 9;
    GetTransactionBlockHeight get_transaction_block_height = 10;
    GetResponseTransactionHash get_response_transaction_hash = 11;
    GetTransactionContent get_transaction_content = 12;
    OpenFile open_file = 13;
    WriteFileStream write_file_stream = 14;
    Flush flush = 15;
    ReadFileStream read_file_stream = 16;
    CloseFile close_file = 17;
    PathExist path_exist = 18;
    IsFile is_file = 19;
    CreateDir create_dir = 20;
    MoveFile move_file = 21;
    RemoveFile remove_file = 22;
    OpenConnection open_connection = 23;
    ReadConnectionStream read_connection_stream = 24;
    CloseConnection close_connection = 25;
    CreateDirIterator create_dir_iterator = 26;
    DestroyDirIterator destroy_dir_iterator = 27;
    HasNextIterator has_next_iterator = 28;
    NextDirIterator next_dir_iterator = 29;
    RemoveDirIterator remove_dir_iterator = 30;
  }
}